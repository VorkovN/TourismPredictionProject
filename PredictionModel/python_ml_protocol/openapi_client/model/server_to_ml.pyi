# coding: utf-8

"""
    Базовые модели для запросов

    No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

    The version of the OpenAPI document: 1.0.0
    Generated by: https://openapi-generator.tech
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from openapi_client import schemas  # noqa: F401


class ServerToMl(
    schemas.DictSchema
):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.

    Параметры для ML модели от сервера
    """


    class MetaOapg:
        
        class properties:
            name = schemas.StrSchema
            latitude = schemas.StrSchema
        
            @staticmethod
            def longitude() -> typing.Type['ModelInt']:
                return ModelInt
        
            @staticmethod
            def coeffNearestPopularity() -> typing.Type['ModelInt']:
                return ModelInt
            carAvailability = schemas.BoolSchema
            busAvailability = schemas.BoolSchema
            bigCarAvailability = schemas.BoolSchema
            shipAvailability = schemas.BoolSchema
            planeAvailability = schemas.BoolSchema
            theatre = schemas.BoolSchema
            ethnicCenter = schemas.BoolSchema
            museum = schemas.BoolSchema
            childrensTourism = schemas.BoolSchema
            cityAttractions = schemas.BoolSchema
            attraction = schemas.BoolSchema
            culturalCentre = schemas.BoolSchema
            shipbuilding = schemas.BoolSchema
            nationalPark = schemas.BoolSchema
            sanatorium = schemas.BoolSchema
            lookout = schemas.BoolSchema
            skiResort = schemas.BoolSchema
            __annotations__ = {
                "name": name,
                "latitude": latitude,
                "longitude": longitude,
                "coeffNearestPopularity": coeffNearestPopularity,
                "carAvailability": carAvailability,
                "busAvailability": busAvailability,
                "bigCarAvailability": bigCarAvailability,
                "shipAvailability": shipAvailability,
                "planeAvailability": planeAvailability,
                "theatre": theatre,
                "ethnicCenter": ethnicCenter,
                "museum": museum,
                "childrensTourism": childrensTourism,
                "cityAttractions": cityAttractions,
                "attraction": attraction,
                "culturalCentre": culturalCentre,
                "shipbuilding": shipbuilding,
                "nationalPark": nationalPark,
                "sanatorium": sanatorium,
                "lookout": lookout,
                "skiResort": skiResort,
            }
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["name"]) -> MetaOapg.properties.name: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["latitude"]) -> MetaOapg.properties.latitude: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["longitude"]) -> 'ModelInt': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["coeffNearestPopularity"]) -> 'ModelInt': ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["carAvailability"]) -> MetaOapg.properties.carAvailability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["busAvailability"]) -> MetaOapg.properties.busAvailability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["bigCarAvailability"]) -> MetaOapg.properties.bigCarAvailability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipAvailability"]) -> MetaOapg.properties.shipAvailability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["planeAvailability"]) -> MetaOapg.properties.planeAvailability: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["theatre"]) -> MetaOapg.properties.theatre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["ethnicCenter"]) -> MetaOapg.properties.ethnicCenter: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["museum"]) -> MetaOapg.properties.museum: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["childrensTourism"]) -> MetaOapg.properties.childrensTourism: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["cityAttractions"]) -> MetaOapg.properties.cityAttractions: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["attraction"]) -> MetaOapg.properties.attraction: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["culturalCentre"]) -> MetaOapg.properties.culturalCentre: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["shipbuilding"]) -> MetaOapg.properties.shipbuilding: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["nationalPark"]) -> MetaOapg.properties.nationalPark: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["sanatorium"]) -> MetaOapg.properties.sanatorium: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["lookout"]) -> MetaOapg.properties.lookout: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["skiResort"]) -> MetaOapg.properties.skiResort: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["name", "latitude", "longitude", "coeffNearestPopularity", "carAvailability", "busAvailability", "bigCarAvailability", "shipAvailability", "planeAvailability", "theatre", "ethnicCenter", "museum", "childrensTourism", "cityAttractions", "attraction", "culturalCentre", "shipbuilding", "nationalPark", "sanatorium", "lookout", "skiResort", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["name"]) -> typing.Union[MetaOapg.properties.name, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["latitude"]) -> typing.Union[MetaOapg.properties.latitude, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["longitude"]) -> typing.Union['ModelInt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["coeffNearestPopularity"]) -> typing.Union['ModelInt', schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["carAvailability"]) -> typing.Union[MetaOapg.properties.carAvailability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["busAvailability"]) -> typing.Union[MetaOapg.properties.busAvailability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["bigCarAvailability"]) -> typing.Union[MetaOapg.properties.bigCarAvailability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipAvailability"]) -> typing.Union[MetaOapg.properties.shipAvailability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["planeAvailability"]) -> typing.Union[MetaOapg.properties.planeAvailability, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["theatre"]) -> typing.Union[MetaOapg.properties.theatre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["ethnicCenter"]) -> typing.Union[MetaOapg.properties.ethnicCenter, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["museum"]) -> typing.Union[MetaOapg.properties.museum, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["childrensTourism"]) -> typing.Union[MetaOapg.properties.childrensTourism, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["cityAttractions"]) -> typing.Union[MetaOapg.properties.cityAttractions, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["attraction"]) -> typing.Union[MetaOapg.properties.attraction, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["culturalCentre"]) -> typing.Union[MetaOapg.properties.culturalCentre, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["shipbuilding"]) -> typing.Union[MetaOapg.properties.shipbuilding, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["nationalPark"]) -> typing.Union[MetaOapg.properties.nationalPark, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["sanatorium"]) -> typing.Union[MetaOapg.properties.sanatorium, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["lookout"]) -> typing.Union[MetaOapg.properties.lookout, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["skiResort"]) -> typing.Union[MetaOapg.properties.skiResort, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["name", "latitude", "longitude", "coeffNearestPopularity", "carAvailability", "busAvailability", "bigCarAvailability", "shipAvailability", "planeAvailability", "theatre", "ethnicCenter", "museum", "childrensTourism", "cityAttractions", "attraction", "culturalCentre", "shipbuilding", "nationalPark", "sanatorium", "lookout", "skiResort", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *_args: typing.Union[dict, frozendict.frozendict, ],
        name: typing.Union[MetaOapg.properties.name, str, schemas.Unset] = schemas.unset,
        latitude: typing.Union[MetaOapg.properties.latitude, str, schemas.Unset] = schemas.unset,
        longitude: typing.Union['ModelInt', schemas.Unset] = schemas.unset,
        coeffNearestPopularity: typing.Union['ModelInt', schemas.Unset] = schemas.unset,
        carAvailability: typing.Union[MetaOapg.properties.carAvailability, bool, schemas.Unset] = schemas.unset,
        busAvailability: typing.Union[MetaOapg.properties.busAvailability, bool, schemas.Unset] = schemas.unset,
        bigCarAvailability: typing.Union[MetaOapg.properties.bigCarAvailability, bool, schemas.Unset] = schemas.unset,
        shipAvailability: typing.Union[MetaOapg.properties.shipAvailability, bool, schemas.Unset] = schemas.unset,
        planeAvailability: typing.Union[MetaOapg.properties.planeAvailability, bool, schemas.Unset] = schemas.unset,
        theatre: typing.Union[MetaOapg.properties.theatre, bool, schemas.Unset] = schemas.unset,
        ethnicCenter: typing.Union[MetaOapg.properties.ethnicCenter, bool, schemas.Unset] = schemas.unset,
        museum: typing.Union[MetaOapg.properties.museum, bool, schemas.Unset] = schemas.unset,
        childrensTourism: typing.Union[MetaOapg.properties.childrensTourism, bool, schemas.Unset] = schemas.unset,
        cityAttractions: typing.Union[MetaOapg.properties.cityAttractions, bool, schemas.Unset] = schemas.unset,
        attraction: typing.Union[MetaOapg.properties.attraction, bool, schemas.Unset] = schemas.unset,
        culturalCentre: typing.Union[MetaOapg.properties.culturalCentre, bool, schemas.Unset] = schemas.unset,
        shipbuilding: typing.Union[MetaOapg.properties.shipbuilding, bool, schemas.Unset] = schemas.unset,
        nationalPark: typing.Union[MetaOapg.properties.nationalPark, bool, schemas.Unset] = schemas.unset,
        sanatorium: typing.Union[MetaOapg.properties.sanatorium, bool, schemas.Unset] = schemas.unset,
        lookout: typing.Union[MetaOapg.properties.lookout, bool, schemas.Unset] = schemas.unset,
        skiResort: typing.Union[MetaOapg.properties.skiResort, bool, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ServerToMl':
        return super().__new__(
            cls,
            *_args,
            name=name,
            latitude=latitude,
            longitude=longitude,
            coeffNearestPopularity=coeffNearestPopularity,
            carAvailability=carAvailability,
            busAvailability=busAvailability,
            bigCarAvailability=bigCarAvailability,
            shipAvailability=shipAvailability,
            planeAvailability=planeAvailability,
            theatre=theatre,
            ethnicCenter=ethnicCenter,
            museum=museum,
            childrensTourism=childrensTourism,
            cityAttractions=cityAttractions,
            attraction=attraction,
            culturalCentre=culturalCentre,
            shipbuilding=shipbuilding,
            nationalPark=nationalPark,
            sanatorium=sanatorium,
            lookout=lookout,
            skiResort=skiResort,
            _configuration=_configuration,
            **kwargs,
        )

from openapi_client.model.model_int import ModelInt
